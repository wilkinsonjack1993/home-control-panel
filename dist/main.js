(()=>{"use strict";const t=document.createElement("template");t.innerHTML='\n    <style>\n\n    #controls-panel-group {\n      background-color: lightgreen;\n      margin-bottom: var(--padding-large);\n      border-radius: var(--border-radius);\n      box-shadow: 1px 1px 1px 1px lightgray;\n      border: 0.5px solid lightgray;\n      margin-left: var(--padding-small);\n      margin-right: var(--padding-small);\n    }\n\n    #control-panel-group-header {\n      padding: var(--padding-small) var(--padding-large);\n    }\n\n    </style>\n\n    <div id="controls-panel-group">\n        <div id="control-panel-group-header">\n          <h3 id="control-panel-group-title"></h3>\n        </div>\n        <slot/>\n    </div>\n          \n';class e extends HTMLElement{constructor(){super(),this.attachShadow({mode:"open"})}connectedCallback(){const e=this.shadowRoot;if(!e)return;e.appendChild(t.content.cloneNode(!0));const n=e.getElementById("control-panel-group-title");n&&(n.innerHTML=this.getAttribute("title")||"")}}customElements.define("control-panel-group",e);const n=document.createElement("template");n.innerHTML='\n    <style>\n    #controls-panel-item {\n      display: flex;\n      align-items: center;\n      justify-content: space-between;\n      background: var(--background-default);\n      border-top: 1px solid gray;\n      padding: var(--padding-large);\n      font-family: var(--font-family);\n    }\n\n    @media (max-width: 400px) {\n      #controls-panel-item {\n        flex-direction: column;\n        align-items: stretch;\n      }\n\n      #controls-panel-item-label {\n        margin-bottom: var(--padding-small);\n        align-self: center;\n      }\n    }\n\n    #controls-panel-item-controller {\n      display: flex;\n      flex-grow: 2;\n      align-items: center;\n      justify-content: center;\n    }\n\n    #controls-panel-item-label {\n      display: flex;\n      flex-grow: 1;\n      max-width: 200px;\n      align-items: center;\n    }\n\n    </style>\n  \n    <div id="controls-panel-item">\n        <div id="controls-panel-item-label">\n            <slot name="label">\n        </div>\n        <div id="controls-panel-item-controller">\n            <slot name="controller">\n        </div>\n    </div>\n';class i extends HTMLElement{constructor(){var t;super(),this.attachShadow({mode:"open"}),null===(t=this.shadowRoot)||void 0===t||t.appendChild(n.content.cloneNode(!0))}}customElements.define("control-panel-item",i);const o=document.createElement("template");o.innerHTML='\n    <style>\n    #toggle-button-container {\n        display: flex;\n        flex-direction: column;\n        align-items: center;\n        justify-content: center;\n    }\n\n    #toggle-button {\n        position: relative;\n        display: inline-block;\n        width: 60px;\n        height: 34px;\n    }\n\n    #toggle-button-input {\n        opacity: 0;\n        width: 0;\n        height: 0;\n    }\n\n    #toggle-button-slider {\n        position: absolute;\n        cursor: pointer;\n        top: 0;\n        left: 0;\n        right: 0;\n        bottom: 0;\n        background-color: #ccc;\n        -webkit-transition: .4s;\n        transition: .4s;\n        border-radius: 34px;\n    }\n\n    #toggle-button-slider:before {\n        position: absolute;\n        content: "";\n        height: 26px;\n        width: 26px;\n        left: 4px;\n        bottom: 4px;\n        background-color: white;\n        -webkit-transition: .4s;\n        transition: .4s;\n        border-radius: 50%;\n    }\n\n    input:checked + #toggle-button-slider {\n        background-color: var(--secondary-color);\n    }\n\n    input:focus + #toggle-button-slider {\n        box-shadow: 0 0 1px  var(--secondary-color);\n    }\n\n    input:checked + #toggle-button-slider:before {\n        -webkit-transform: translateX(26px);\n        -ms-transform: translateX(26px);\n        transform: translateX(26px);\n    }\n\n    </style>\n\n    <div id="toggle-button-container">\n      <label id="toggle-button">\n          <input aria-checked="false" tab-index=0 id="toggle-button-input" type="checkbox">\n          <span id="toggle-button-slider"></span>\n      </label>\n      <p id="toggle-button-label">Off</p>\n    </div>\n';class a extends HTMLElement{constructor(){super(),this.onText="On",this.offText="Off",this.eventId=null,this.onChange=t=>this.toggled(t),this.attachShadow({mode:"open"})}connectedCallback(){var t;null===(t=this.shadowRoot)||void 0===t||t.appendChild(o.content.cloneNode(!0)),this.onText=this.getAttribute("on-text")||"On",this.offText=this.getAttribute("off-text")||"Off",this.eventId=this.getAttribute("event-id");const e="true"===this.getAttribute("initial-state");this.getInput().ariaLabel=this.getAttribute("label")||"Toggle element",e&&(this.setInputState(e),this.setText(e));const n=this.getInput();n&&n.addEventListener("change",this.onChange)}disconnectedCallback(){this.getInput().removeEventListener("change",this.onChange)}setText(t){var e;const n=null===(e=this.shadowRoot)||void 0===e?void 0:e.getElementById("toggle-button-label");n&&(n.innerText=t?this.onText:this.offText)}getInput(){var t;return null===(t=this.shadowRoot)||void 0===t?void 0:t.getElementById("toggle-button-input")}setInputState(t){const e=this.getInput();e&&(e.checked=t,e.ariaChecked=`${t}`)}toggled(t){this.setText(t.target.checked),this.eventId&&this.dispatchEvent(new CustomEvent(this.eventId,{detail:{checked:t.target.checked},bubbles:!0,composed:!0}))}}customElements.define("toggle-button",a);const l=document.createElement("template");l.innerHTML='\n<style>\n#slider-container {\n\n  width: 100%;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n}\n\n#slider {\n  -webkit-appearance: none;  \n  appearance: none;\n  width: 100%; \n  height: 25px;\n  background: #d3d3d3;\n  outline: none;\n  opacity: 0.7;\n  -webkit-transition: .2s;\n  transition: opacity .2s;\n  border-radius: 20px;\n}\n\n#slider:hover {\n  opacity: 1;\n}\n\n#slider::-webkit-slider-thumb {\n  -webkit-appearance: none; \n  appearance: none;\n  width: 30px;\n  height: 30px;\n  border-radius: 50%;\n  background:  var(--secondary-color); \n  cursor: pointer; \n}\n\n#slider::-moz-range-thumb {\n  width: 30px; \n  height: 30px; \n  border-radius: 50%;\n  background:  var(--secondary-color);\n  cursor: pointer; \n}\n\n#slider-label {\n    display: none;\n}\n</style>\n\n<div id="slider-container">\n  <label for="slider" id="slider-label">Slider label</label>\n  <input id="slider" \n    type="range" \n    min="0" \n    max="100" \n    value="0"\n    aria-valuemin="0"\n    aria-valuemax="100"\n    aria-valuenow="0" \n    aria-orientation="horizontal"\n    >\n    <output for="slider" id="slider-output">0</output>\n</div>\n';class r extends HTMLElement{constructor(){var t;super(),this.eventId=null,this.onChange=t=>this.updateValue.bind(this)(t),this.attachShadow({mode:"open"}),null===(t=this.shadowRoot)||void 0===t||t.appendChild(l.content.cloneNode(!0))}connectedCallback(){const t=this.getAttribute("initial-value");t&&this.setValue(t),this.eventId=this.getAttribute("event-id");const e=this.getAttribute("label");e&&(this.getLabel().innerHTML=e);const n=this.getInput(),i=this.getAttribute("max");i&&(n.max=i,n.ariaValueMax=i);const o=this.getAttribute("min");o&&(n.min=o,n.ariaValueMin=o),n&&n.addEventListener("input",this.onChange)}disconnectedCallback(){this.getInput().removeEventListener("input",this.onChange)}updateValue(t){const e=(null==t?void 0:t.target).value;e&&(this.setValue(e),this.eventId&&this.dispatchEvent(new CustomEvent(this.eventId,{detail:{value:e},bubbles:!0,composed:!0})))}setValue(t){const e=this.getInput();e.value=t,e.ariaValueNow=t;const n=this.getOutput();n.value=t,n.innerHTML=t}getInput(){var t;return null===(t=this.shadowRoot)||void 0===t?void 0:t.getElementById("slider")}getOutput(){var t;return null===(t=this.shadowRoot)||void 0===t?void 0:t.getElementById("slider-output")}getLabel(){var t;return null===(t=this.shadowRoot)||void 0===t?void 0:t.getElementById("slider-label")}}customElements.define("slider-control",r);const s=[{title:"Lights",controls:[{type:"toggle",label:"Sitting room",ariaLabel:"Sitting room lights",initialState:!0,onText:"On",offText:"Off",eventId:"sitting-room-lights-toggled"},{type:"slider",label:"Bedroom",ariaLabel:"Bedroom lights",initialValue:0,eventId:"bedroom-lights-changed"},{type:"toggle",label:"Kitchen",ariaLabel:"Kitchen lights",initialState:!1,onText:"On",offText:"Off",eventId:"kitchen-lights-toggled"}]},{title:"Other Devices",controls:[{type:"toggle",label:"Curtains",ariaLabel:"Open/close curtains",initialState:!0,onText:"Open",offText:"Close",eventId:"curtains-opened-or-closed"},{type:"slider",label:"Thermostat",ariaLabel:"Thermostat",initialValue:18,eventId:"thermostat-changed",max:36},{type:"toggle",label:"Garden Sprinklers",ariaLabel:"Garden sprinklers",initialState:!1,onText:"On",offText:"Off",eventId:"garden-sprinklers-toggled"}]}],d=document.createElement("template");d.innerHTML='\n<style>\n#notifications {\n    color: var(--primary-color);\n    font-size: var(--font-size-large);\n    height: 50px;\n    font-weight: bold;\n    width: 100%;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n}\n</style>\n\n<div id="notifications">\n    <h4></h4>\n</div>\n';class c extends HTMLElement{constructor(){var t;super(),this.listeners={},this.timeout=null,this.attachShadow({mode:"open"}),null===(t=this.shadowRoot)||void 0===t||t.appendChild(d.content.cloneNode(!0))}connectedCallback(){s.forEach((t=>{t.controls.forEach((t=>{const{type:e,eventId:n}=t,i=n=>{var i,o;let a;if("toggle"===e){const e=null===(i=n.detail)||void 0===i?void 0:i.checked;a=this.getToggleMessage(t,e)}else if("slider"===e){const e=null===(o=n.detail)||void 0===o?void 0:o.value;a=this.getSliderMessage(t,e)}a&&(this.timeout&&clearTimeout(this.timeout),this.addNotification(a),this.timeout=setTimeout((()=>{this.addNotification("")}),3e3))};document.addEventListener(n,i),this.listeners[n]=i}))}))}disconnectedCallback(){Object.keys(this.listeners).forEach((t=>{const e=this.listeners[t];document.removeEventListener(t,e)}))}addNotification(t){var e;const n=null===(e=this.shadowRoot)||void 0===e?void 0:e.getElementById("notifications");n&&(n.innerHTML=t)}getToggleMessage(t,e){var n,i;return`${t.ariaLabel} has been set to ${e?(null===(n=t.onText)||void 0===n?void 0:n.toLocaleLowerCase())||"on":(null===(i=t.offText)||void 0===i?void 0:i.toLocaleLowerCase())||"off"}`}getSliderMessage(t,e){return`${t.ariaLabel} has been set to ${e}`}}customElements.define("control-change-notifications",c);const u=t=>{const e=document.createElement("control-panel-item"),n=document.createElement("div");n.id="slot",n.slot="label",n.innerHTML=t.label,e.append(n);const i=document.createElement("div");let o;return i.id="slot",i.slot="controller",o="slider"===t.type?(t=>{const e=document.createElement("slider-control");return e.setAttribute("label",t.ariaLabel),e.setAttribute("event-id",t.eventId),t.min&&e.setAttribute("min",t.min.toString()),t.max&&e.setAttribute("max",t.max.toString()),t.initialValue&&e.setAttribute("initial-value",t.initialValue.toString()),e})(t):(t=>{const e=document.createElement("toggle-button");return e.setAttribute("label",t.ariaLabel),e.setAttribute("event-id",t.eventId),t.initialState&&e.setAttribute("initial-state",t.initialState.toString()),t.onText&&e.setAttribute("on-text",t.onText),t.offText&&e.setAttribute("off-text",t.offText),e})(t),i.append(o),e.append(i),e},h=document.createElement("template");h.innerHTML='\n    <style>\n    #app-root {\n      \n    --primary-color: #1976d2;\n    --secondary-color: #9c27b0;\n\n    --background-default: #f0f0f0;\n    --background-paper: #fff;\n\n    --padding-small: 0.5rem;\n    --padding-medium: 1rem;\n    --padding-large: 1.5rem;\n\n    --border-radius: 1rem;\n    \n    --font-size-small: 0.75rem;\n    --font-size-medium: 1rem;\n    --font-size-large: 1.25rem;\n\n    --font-family: "Roboto", Arial, Helvetica, sans-serif;\n\n      min-height: 100vh;\n      min-width: 100vw;\n    }\n\n    #controls-panel {\n      display: flex;\n      flex-direction: column;\n      max-width: 800px;\n      margin: 0 auto;\n    }\n\n    #slot {\n      width: 100%;\n    }\n\n    header {\n      padding: var(--padding-medium) var(--padding-large);\n      font-family: var(--font-family);\n    }\n\n    </style>\n    <div id="app-root">\n      <header>\n        <h2>My Home Control Panel</h2>\n        <control-change-notifications/>\n      </header>\n      <main>\n        <div id="controls-panel">\n        </div>\n      </main>\n    </div>\n';class g extends HTMLElement{constructor(){var t;super(),this.attachShadow({mode:"open"}),null===(t=this.shadowRoot)||void 0===t||t.appendChild(h.content.cloneNode(!0)),s.map((t=>{var e,n;const i=document.createElement("control-panel-group");i.title=t.title,t.controls.map((t=>{const e=u(t);i.appendChild(e)})),null===(n=null===(e=this.shadowRoot)||void 0===e?void 0:e.getElementById("controls-panel"))||void 0===n||n.appendChild(i)}))}}customElements.define("application-root",g)})();